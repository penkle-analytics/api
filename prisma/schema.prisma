// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionPlan {
  DEVELOPER
  HOBBYIST
  INDIE
  STARTUP
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAUSED
  CANCELLED
}

model Subscription {
  id                 String             @id @default(cuid())
  subscriptionId     String             @unique
  customerId         String             @unique
  productId          String             @unique
  subscriptionPlan   SubscriptionPlan
  subscriptionStatus SubscriptionStatus
  periodEndsAt       DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domains      UserDomain[]
  subscription Subscription?
}

model WaitlistUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDomain {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  domain   Domain @relation(fields: [domainId], references: [id])
  domainId String

  @@unique([userId, domainId])
}

model Domain {
  id        String   @id @default(cuid())
  name      String   @unique
  // reportingTimezone String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events   Event[]
  users    UserDomain[]
  sessions Session[]
}

enum EventType {
  PAGE_VIEW
  // CUSTOM_EVENT
}

model Event {
  id              String    @id @default(cuid())
  type            EventType
  // name      String?
  uniqueVisitorId String?
  href            String
  referrer        String?
  country         String
  countryCode     String
  browser         String
  os              String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  String
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model Session {
  id              String   @id @default(cuid())
  uniqueVisitorId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  events   Event[]
  domain   Domain  @relation(fields: [domainId], references: [id])
  domainId String
}
