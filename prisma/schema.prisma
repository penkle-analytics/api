generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id                 String             @id @default(cuid())
  subscriptionId     String             @unique
  customerId         String             @unique
  productId          String             @unique
  subscriptionPlan   SubscriptionPlan
  subscriptionStatus SubscriptionStatus
  periodEndsAt       DateTime
  cancelAtPeriodEnd  Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  email      String   @unique
  password   String
  lastSeenAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription?
  domains      UserDomain[]
}

model WaitlistUser {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDomain {
  id   String     @id @default(cuid())
  role DomainRole @default(OWNER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, domainId])
}

model Domain {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events   Event[]
  sessions Session[]
  users    UserDomain[]
}

model Event {
  id              String    @id @default(cuid())
  uniqueVisitorId String?
  type            EventType
  ua              String?
  href            String?
  referrer        String?
  referrerUrl     String?
  country         String?
  countryCode     String?
  city            String?
  region          String?
  latitude        String?
  longitude       String?
  browser         String?
  browserVersion  String?
  engine          String?
  engineVersion   String?
  os              String?
  osVersion       String?
  device          String?
  deviceVendor    String?
  deviceModel     String?
  cpuArchitecture String?
  bot             Boolean?  @default(false)
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id])
}

model Session {
  id              String @id @default(cuid())
  uniqueVisitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domainId String
  domain   Domain  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  events   Event[]
}

enum SubscriptionPlan {
  DEVELOPER
  HOBBYIST
  INDIE
  STARTUP
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELLED
  PAUSED
}

enum EventType {
  PAGE_VIEW
}

enum DomainRole {
  OWNER
  ADMIN
  MEMBER
}
